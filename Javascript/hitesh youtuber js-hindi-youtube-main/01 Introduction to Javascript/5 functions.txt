function statement / function declaration
    function greet(name) {
        return `Hello, ${name}!`;
    }
    console.log(greet('Alice'));  // Output: Hello, Alice!

function expression - anonymous function assigned to a variable
    const greet = function(name) {
        return `Hello, ${name}!`;
    };
    console.log(greet('Bob'));


anonymous function
An anonymous function is a function without a name.
It is often used as a value for a variable or passed as an argument to another function.
    function(parameters) {
        // function body
    }

first class functions
    In JavaScript, functions are first-class citizens.
    This means functions can be a. assigned to variables,
                                b. passed as arguments to other functions,
                                c.returned from functions and
                                d.assigned to object properties.
        // Assigning a function in a variable
        const greet = function(name) {
            return `Hello, ${name}!`;
        };

        // Passing a function as an argument
        function executeFunction(func, value) {
            return func(value);
        }

        console.log(executeFunction(greet, 'Dave'));  // greet function is passed as an argument

        // Returning a function from another function
        function createGreeting(greeting) {
            return function(name) {
                return `${greeting}, ${name}!`;
            };
        }

        const sayHi = createGreeting('Hi');
        console.log(sayHi('Eve'));  // Output: Hi, Eve!

arrow functions
Arrow functions provide a shorter syntax for writing function expressions and lexically bind the this value.
    const functionName = (parameters) => {
    // function body
};

IIFE (Immediately Invoked Function Expression)
Variables declared inside an IIFE are not accessible outside its scope.
    (function () {
        const privateVar = "I am private";
        console.log(privateVar);
    })();
    // console.log(privateVar); // Error: privateVar is not defined


callback function

Callback Function: A function passed as an argument to another function and executed later.
Usage: Enables asynchronous programming, used in events, timers, and handling results of operations like API requests.
Examples: Used in array methods (map, filter, forEach), asynchronous operations (setTimeout, readFile).

        // Define a function that takes a callback
        function processUserInput(callback) {
            const name = prompt('Please enter your name.');
            callback(name);
        }

        // Define a callback function
        function greet(name) {
            alert(`Hello, ${name}!`);
        }

        // Pass the callback function as an argument
        processUserInput(greet);


Summary
Function Declaration: function functionName(parameters) { // body }
Function Expression: const functionName = function(parameters) { // body };
Anonymous Function: function(parameters) { // body }
First-Class Functions: Functions can be stored, passed, and returned.
Arrow Functions: const functionName = (parameters) => { // body }; or shorter const functionName = parameters => expression;

Higher-order function
A higher-order function is a function that can take other functions as arguments 
and/or return a function as a result.

function addition(callback) {
    console.log("adding two numbers");
    callback();
}

function add() {
    console.log(2 + 2);
}

addition(add);  //addition is higher order function bcoz its taking a fn as an argument

---------

function addition() {
   return function add() {
    console.log(2 + 2);
   }
}



const sum = addition(); //addition is higher order function bcoz it's returning another function
sum();


Pure Functions are those functions that are deterministic in nature
If you gonna pass same set of arguments, you would be expecting same set of outputs

    function areaOfRectangle(length, width) {
    return length * width
    }
    console.log(areaOfRectangle(10, 20))
    console.log(areaOfRectangle(10, 20))

Impure Function
    Same set of arguments are passed but we are not going to get same set of outputs

    function test(length, width) {
    const temp = Math.floor(Math.random() * 10)
    return length * width * temp
    }

    console.log(test(10, 20))
    console.log(test(10, 20))