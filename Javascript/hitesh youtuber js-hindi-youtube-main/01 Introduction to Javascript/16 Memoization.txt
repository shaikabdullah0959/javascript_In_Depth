Memoization:
In order to understand how Dynamic Programming works, we need to understand what caching means.
Caching is a way to store values so you can use them later on.

In simpler terms, Memoization is returning the cached value

function add80(n) {
  return n + 80;
}

add80(89);
add80(89); // calculates each time this func is called

// memoized func

let cache = {};
const memoize = (n) => {
  if (n in cache) {
    return cache[n];
  } else {
    console.log('Takes Time');
    cache[n] = n + 80;
    return cache[n];
  }
};

console.log('1', memoize(5)); // Takes Time
console.log('2', memoize(5)); // Returns from the cache
