In JavaScript, call, apply, and bind are methods used to set the context of this when invoking a function.

Here's an overview of each:

1. call()
    The call method calls a function with a given this value(object) and arguments provided individually.
    Object will be the first argument then we can pass other arguments.

   function greet(greeting, punctuation) {
    console.log(greeting + ', ' + this.name + punctuation);
    }
    const person = { name: 'Alice' };
    greet.call(person, 'Hello', '!'); // Output: Hello, Alice!

2. apply()
    The apply method calls a function with a given this value(object)and arguments provided as an array 

   function greet(greeting, punctuation) {
    console.log(greeting + ', ' + this.name + punctuation);
   }
    const person = { name: 'Alice' };
    greet.apply(person, ['Hello', '!']); // Output: Hello, Alice!

3. bind()
    It's same as a call method but with bind(), function greet will be bind/linked to the object and function is returned and assign it to a variable then call that variable with ()

    function greet(greeting, punctuation) {
        console.log(greeting + ', ' + this.name + punctuation);
    }

    const person = { name: 'Alice' };

    const greetAlice = greet.bind(person, 'Hello');
    greetAlice('!'); // Output: Hello, Alice!

Summary
Key Differences
call vs. apply:

Both call and apply invoke the function immediately with a specified this value.
call accepts arguments individually.
apply accepts arguments as an array.

bind:
bind does not invoke the function immediately. Instead, it returns a new function with a specified this value and initial arguments.
The new function can be invoked later with additional arguments if needed.