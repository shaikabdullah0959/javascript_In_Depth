 1. types and scopes
   let and const
   local scope, block scope, global scope and lexical scope
2. data types
   primitive and reference
   primitive data types:
    number - number methods,
    string-  string methods, string._ _ prototype__(returns all methods),
    boolean, null, undefined, symbol
   reference data types:
    array, object, set, map, typed arrays
3. type conversion - 3 rules of tconver..
4. operators, loops
5. functions
    function declaration, function expression(anonymous function), callback function  
6. oops in js
   prototypal inheritance
   classes
7. functional programming in js
    call, apply, bind
    higher order functions - return a function inside a function. e.g, map, reduce filter etc
	https://www.youtube.com/watch?v=rRgD1yVwIvE -higher order functions
    closures
    
8. modules
9. asyncronous 
   Event loop, settimeout, setinterval, fetchapi, promises, asyn await (asyn chaining?)
   https://www.youtube.com/watch?v=PoRJizFvM7s -- callback promises, asyn await
10. DOM, addeventlister, event bubbling, event capturing
11. Advanced js
    proxy reflection
    symbols,
    regex,
    web workers,
    generators
    Memoization

Javascript

1. Understand Core Concepts:

Fundamentals:

Variables and Data Types: var, let, const, primitive vs. reference types.
Operators: Arithmetic, comparison, logical, bitwise, and ternary operators.
Control Structures: if, else, switch, loops (for, while, do-while).
Functions:

Function Declarations vs. Expressions: Arrow functions, anonymous functions, IIFE (Immediately Invoked Function Expressions).
Scope and Closures: Understanding lexical scoping, closures, and the this keyword.
Higher-order Functions: Functions as first-class citizens, callbacks, map, filter, reduce.

Objects and Arrays:
Object Creation: Literals, constructors, Object.create.
Array Methods: Common methods like push, pop, shift, unshift, splice, slice, concat, forEach, map, filter, reduce.

Asynchronous JavaScript:
Promises: Creating and handling promises, then, catch, finally.
Async/Await: Writing asynchronous code in a synchronous style.
Event Loop: Understanding how JavaScript handles asynchronous operations.

DOM Manipulation:
Selecting Elements: getElementById, querySelector, querySelectorAll.
Event Handling: Adding and removing event listeners.
Modifying Elements: Changing styles, attributes, and content.

ES6+ Features:
Destructuring: Arrays and objects.
Template Literals: Multi-line strings, string interpolation.
Spread and Rest Operators: Usage in arrays and objects.

Modules: Importing and exporting modules.

Angular

1. Understand Core Angular Concepts:

Architecture:
Modules: NgModule, declarations, imports, providers, bootstrapping.
Components: Component lifecycle, decorators, data binding (interpolation, property, event, and two-way binding).
Services and Dependency Injection: Creating services, injecting services into components and other services.

Templates:
Directives: Structural (*ngIf, *ngFor) and attribute directives (ngClass, ngStyle).
Pipes: Built-in pipes (DatePipe, UpperCasePipe, etc.), creating custom pipes.
Template Syntax: Template reference variables, input/output properties, event binding.

Routing:
Router Module: Configuring routes, router outlets, navigation.
Route Guards: CanActivate, CanDeactivate, Resolve, etc.
Lazy Loading: Implementing lazy-loaded modules.

Forms:
Template-driven Forms: ngModel, form directives.
Reactive Forms: FormControl, FormGroup, FormBuilder, validation.
HTTP Client:
HttpClient Module: Making HTTP requests, handling responses, error handling, interceptors.

State Management:
Component State Management: Input/output properties, local component state.
Global State Management: Services, NgRx (if applicable).

Advanced Topics:
Change Detection: Zones, ChangeDetectorRef, OnPush strategy.
Angular Universal: Server-side rendering.
Performance Optimization: Lazy loading, AOT compilation, optimization techniques.


3. Common Interview Questions:
Explain the difference between components and directives.
How does Angular handle dependency injection?
What are the differences between template-driven and reactive forms?
Explain the Angular lifecycle hooks and their uses.
How does Angular's change detection mechanism work?
What are route guards, and how are they implemented?
How do you handle HTTP errors in Angular applications?


https://www.youtube.com/playlist?list=PLqLR2H326bY4GoOaaxVYwdbNl9dvyWKvU - angular in depth



-----------------

Javascript Angular

Propeers
OOPS, event loop, debounce, prototype inheritance, polypill

Technical suneja - Interview preparation videos YouTube playlist
Akshay saini - namaste javascript
https://www.youtube.com/playlist?list=PLmcRO0ZwQv4QMslGJQg7N8AzaHkC5pJ4t

Problems faced in javascript and how you overcame it


https://www.youtube.com/watch?v=ecZjJPBkgSs - TOPICS to crack Frontend Developer Interview! ðŸ¤¯ | javascript interview questions and answers
https://www.youtube.com/watch?v=tOo9c6SK_do  -  Top 10 JavaScript Interview Questions EXPLAINED! E.g, event loop setTimeout, promise.resolve both works based on event loop

Topics to prepare for front end job image in Abdullah folder
How to improve page performance
How html parsing works
Caching in front end

https://javascript.info/
interview questions
* Things covered:
    * Javascript
    * HTML & CSS
    * Unit testing
    * Design patterns
    * Machine coding round
    * Framework levelÂ  questions (**)

* Topics
    * Promises
        * Promise.All, Promise.AllSettled.
        * Promise chaining
        * Where can you use await keyword
        * Promises with SetTimeouts.
    * Closures & scopes
        * Outputs of code snippet
        * Focussing on which scope will be used in different use cases.
        * Trying to access a variable and analyzing the output.
    * Polyfills
        * Promise AllSettled
        * bind(), apply()
    * Caching
        * Ways to improve your page performance, caching images, css files etc.
    * Web performance (layouting, painting)
        * Image optimisations
        * HTML parsing (e2e)
        * Loading javascript, considering the entire page load time.
    * Event loop
        * Working of an event loop, for example, taking some code snippet and dry running it.
        * How does an event loop resolve the priority among multiple things available to be put on the JS callstack?
    * Prototypes
        * Prototype chaining
        * Mocking inheritance in javascript
    * Debugging techniques
    * HTML layouting and css techniques
