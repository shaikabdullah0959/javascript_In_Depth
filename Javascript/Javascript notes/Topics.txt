**JavaScript Short Notes**

### 1. **Introduction to JavaScript**
JavaScript is a lightweight, interpreted programming language used to create dynamic web pages. It runs on the client-side and supports object-oriented, functional, and imperative programming styles. JavaScript allows interaction with HTML & CSS, event handling, and API integration.

### 2. **Data Types & Variables**
JavaScript has two types of data:
- **Primitive types**: `string`, `number`, `boolean`, `null`, `undefined`, `BigInt`, `Symbol`.
- **Non-primitive types**: `Object`, `Array`, `Function`.
- Variables can be declared using:
  - `var` (function-scoped, hoisting applies).
  - `let` (block-scoped, no hoisting issues).
  - `const` (block-scoped, cannot be reassigned).

### 3. **Operators**
Operators are used to perform operations on variables and values:
- **Arithmetic Operators**: `+`, `-`, `*`, `/`, `%`, `**`.
- **Comparison Operators**: `==`, `!=`, `===`, `!==`, `>`, `<`, `>=`, `<=`.
- **Logical Operators**: `&&`, `||`, `!`.
- **Assignment Operators**: `=`, `+=`, `-=`, `*=`, `/=`.
- **Bitwise Operators**: `&`, `|`, `^`, `~`, `<<`, `>>`.

### 4. **Control Flow**
Control flow statements help determine the execution flow in a program:
- **Conditional statements**: `if`, `else if`, `else`, `switch`.
- **Loops**:
  - `for` - runs a block of code a specified number of times.
  - `while` - runs while a condition is true.
  - `do...while` - executes at least once before checking the condition.
  - `forEach` - iterates over arrays.

### 5. **Functions**
Functions are reusable blocks of code:
- Declared using `function` keyword: `function myFunc() {}`.
- Arrow functions: `const myFunc = () => {}`.
- Parameters and return values.
- **Higher-order functions**: Functions that take other functions as arguments.
- **Callback functions**: Functions passed as parameters to other functions.

### 6. **Objects & Arrays**
- **Objects** store key-value pairs: `const obj = { key: value }`.
- **Arrays** hold multiple values: `const arr = [value1, value2]`.
- Useful methods:
  - Arrays: `push()`, `pop()`, `shift()`, `unshift()`, `map()`, `filter()`, `reduce()`.
  - Objects: `Object.keys()`, `Object.values()`, `Object.entries()`.

### 7. **ES6+ Features**
Modern JavaScript features include:
- `let` and `const` for block-scoped variables.
- **Arrow functions**: `()=>{}`.
- **Template literals**: ``Hello, ${name}``.
- **Destructuring**: `const {name, age} = obj`.
- **Spread/rest operators**: `[...arr]`, `{...obj}`.
- **Modules**: `export` and `import`.

### 8. **DOM Manipulation**
DOM (Document Object Model) manipulation allows modifying HTML and CSS dynamically.
- Select elements: `document.getElementById()`, `querySelector()`.
- Modify elements: `innerHTML`, `textContent`, `setAttribute()`.
- Handle events: `addEventListener('click', callback)`.

### 9. **Asynchronous JavaScript**
Managing asynchronous code execution:
- **Callbacks**: Functions passed as arguments to other functions.
- **Promises**: `fetch(url).then().catch()`.
- **Async/Await**: `async function fetchData() { await fetch(url); }`.
- **setTimeout() & setInterval()**: Execute code after a delay.

### 10. **Error Handling**
Handling runtime errors to prevent application crashes:
- `try...catch` for handling errors.
- `throw` for custom errors.
- `finally` executes regardless of errors.

### 11. **JavaScript Classes & OOP**
Object-oriented programming (OOP) in JavaScript:
- **Classes**: `class MyClass { constructor() {} }`.
- **Inheritance**: `class Child extends Parent {}`.
- **Encapsulation**: Using private fields (`#property`).

### 12. **JavaScript Modules**
Modular JavaScript code:
- **Exporting**: `export { func }` or `export default`.
- **Importing**: `import { func } from 'module'`.

### 13. **Event Loop & Call Stack**
Understanding JavaScript's execution model:
- **Call stack**: Handles synchronous tasks.
- **Event loop**: Manages asynchronous operations.
- **Web APIs**: Process async tasks in the background.

### 14. **Web Storage**
Methods to store data in the browser:
- `localStorage.setItem('key', value)`, `getItem('key')`.
- `sessionStorage`: Stores data until the session ends.
- `cookies`: Stores small data with an expiration date.

### 15. **JavaScript Frameworks & Libraries**
Popular tools for JavaScript development:
- **Front-end**: React.js, Angular, Vue.js.
- **Back-end**: Node.js.

This document provides an overview of JavaScript. For deeper learning, refer to official documentation or tutorials.

