<!-- 
   a. when we run the application in browser Angular adds some <script></script> files to index.html.
   in index.html there will be main.js file which is same as main.ts file in our project and it has the information of 
  root module and root module has the info of root component.
   b. NgModule decorator is present in app.module.ts file and it has the info of all the components, modules, services of that module and root component of that module.
   components are present in declarations array.
   modules are present in imports array like httpModule, formsModule etc.
   services are present in providers array
   root comp is present in bootstrap array.

   c. component decorator is a function with object as a parameter. object has info of selector name, html file path ,
    css file path etc
   d. styles property present in component  take  array of strings . eg ['h1{ color : green; border: 1px solid orange}'];
   e. selectors in component.              usage of selector in html
      selector : 'app-root'                <app-root></app-root>
      selector : '.app-root'                <div class="app-root"></div> class selector
      selector : '[app-root]'                <div app-root></div>  attribute selector.
      In css for attribute selection we use [] e.g, input[type =" text"] type is an attribute.
                                                            
   f. communication between component and html happens through binding
      1. one way binding  
          string interpolation {{}}, property binding  component -> html
          event binding    html -> component
      2. two way binding   c-> html and htlm -> c
      3. one difference between interpolation and property binding is when a non string value(i.e, boolean true or false) is
      assigned to attribute of html interpolation doesn't make a difference for both true or false where as p binding does.
      e.g [disabled] ='true/false' disables/enables input fields
          disabled='{{true/false}}' disables in both cases.
      4. in case of binding a value to a string interpolation is used.
         e.g <img src="images/{{imageName}}"  imageName is a variable in Component file.
      5. to pass a value through event binding use $event. e.g (keyup) ="sendData($event)". To access the value in class
      use event.target.value.
      6. For two way binding ngModel is required and to be able to use it FormsModule is required. so import it in app.module.ts file.
   g. Parent and child component communicate through @Input and @Output decorator.
      passing data to childComp through propertyBinding.
      e.g, <childComponent [fName] ="firstName"></childComponent> fName is in childComponent and firstName is a
      variable in parentComponent.   
      property and event Binding can be used on custom properties and methods and inbuilt attributes.
      custom property and event Binding - [fName]="firstName", (setLName)="setLastName()" 
      inbuilt property and event Binding - [disabled]="true" (click)="xyz()"
   f. We can access DOM element in two ways.
      1. template reference variable.
      e.g in html <input #xyz>  <button (click)="sendData(xyz)">submit</button> 
          in ts file sendData(data){console.log(data)} > outputs whole element.
      2. @viewchild() decorator.  > outputs elementRef
   g. content projection
   h. view encapsulation pending
   i. lifecycle hooks pending
-->

Directives
<!-- 
There are three kinds of directives in Angular: 
 1. Components—directives with a template. 
 2. Structural directives—change the DOM layout by adding and removing DOM elements. *ngIf, *ngFor, *ngSwitch
 3. Attribute directives—change the appearance or behavior of an element, component, or another directive.
    It doesn't add/remove element to the DOM. It changes the appearance of that element. 
    ngStyle and ngClass. Both attr  directives are used for dynamic styling.
 4. Directives are instructions in the DOM.
 5. <ng-template> -
      1. is a virtual element and it will be commented in the dom .
      2. it is used along with structural directives like *ngIf, *ngFor, *ngSwitch.
      3. only the content inside ng-template element will be added to the dom. ng-template will not be added
         to the dom.
      e.g;l
      <div *ngIf="true">Hello</div> is converted internally as
      <ng-template [ngIf]="true">
        <div>Hello</div>
    </ng-template>
6.  <ng-container> -
     1. Avoid adding element to the DOM with the help of ng-container
     2. We should use ng-container when we just want to apply multiple structural directives without adding any
        extra element in our DOM. 
        <ng-container *ngFor = "let item of items">
          <div *ngIf = "item.id">{{item.name}}</div> 
    </ng-container>
 -->




Forms
<!--
  classes
  ng-touched, untouched
  ng- dirty, pristine
  ng-valid, invalid
   *Defining a name attribute is a requirement when using [(ngModel)] in combination with a form. error if name attribute
   is not added to element which has [(ngModel)]
   *Internally, Angular creates FormControl instances and registers them with an NgForm directive that Angular attached to the <form> tag.
   Each FormControl is registered under the name you assigned to the name attribute. 
   *Using ngModel in a form gives you more than just two-way data binding. It also tells you if the user touched the control, if the value changed, 
   or if the value became invalid.

   Model-driven forms:
    1. setValue is used to update all form fields, partial update cannot be done and it will throw an error
    2. patchValue - used to update partial data. can also be used to update full data
    3. Reactive forms can be build in two ways 1. using formGroup and formControl Classes 2. using formBuilder
    4. formBuilder has 3 methods control() , group() and array()
    5. formBuilder reduces the repetation code like new FormGroup(), new FormControl()
    6. http://csharp-video-tutorials.blogspot.com/2018/10/angular-reactive-forms-validation.html
    7. valueChanges is a property present in abstract control class and it emits a value everytime a value is changed in formGroup
    or formControl. We have to subscribe to it to get the value

  Model Driven forms are easy to test.  TDF are difficult to do unit test
  MD forms are great for complex forms  TD forms are great for simple forms.
  Most of the logic is in component     Most of the logic is in html page
  can add dynamic elements and do validations
  more code is required than TD forms
  Two classes are required to create MDF
  1. formGroup
  2. formControl
  MOdel driven form building blocks
  1. formControl
  2. formGroup
  3. formArray - an array which has formCOntrol, formGroup and nested formArray
  * formArray is used when dynamic form fields are added to the form. formGroup controls is an object
  whereas formArray controls is an array console.log()

  -->



Observables
<!--
    1. Observables offer significant benefits over other techniques for event handling, asynchronous programming, and handling multiple values.
    2. Observables are mainly used for asynchronous programming in angular.
    3. let obs = Rx.Observable
                .interval(1000);
          obs.subscribe(value => console.log("Subscriber: " + value));
       Observable obs emits a number every second. Observables execute only when we subscribe to it.
       Observables keep on emitting the values untill we unsubsribe it or when an operator is applied to stop after few emits.
       e.g Rx.Observable.interval(1000).take(3);  outputs only 3 numbers 1,2,3 only.
       obs.subscribe(
                    x => console.log('Observer got a next value: ' + x),
                    err => console.error('Observer got an error: ' + err),
                    () => console.log('Observer got a complete notification')
                    );
      Subscribe takes parameters(next,error, complete). Last two parameters are optional. 
   4. There are a few places in Angular where reactive programming and observables are in use.
        1.The EventEmitter class extends Observable.Under the hood this works via Observables.
        2.The HTTP module uses observables to handle AJAX requests and responses.
        3.The Router and Forms modules use observables to listen for and respond to user-input events.
          Reactive forms have properties that use observables to monitor form control values. Example, valuechanges property of model driven
          form uses observables.
          this.route.paramMap uses Observable to read dynamic id's of the url.
   5. The advantage of RxJS and Observables come to play when we start using more of the complex operators like debounce and distinctUntilChanged.
   Example for observable using async pipe
       The AsyncPipe subscribes to an observable or promise and returns the latest value it has emitted. 
       When a new value is emitted, the pipe marks the component to be checked for changes.
        @Component({
        selector: 'async-observable-pipe',
        template: `<div><code>observable|async</code>:
            Time: {{ time | async }}</div>`
        })
        export class AsyncObservablePipeComponent {
        time = new Observable(observer =>
            setInterval(() => observer.next(new Date().toString()), 1000)
        );
        }
  
-->

Pipes
<!--
    1. A pipe takes in data as input and transforms it to a desired output.
    2. To transform data we use pipe operator {{ name | lowerCase}}
    3. A pipe can accept any number of optional parameters to fine-tune its output. To add parameters to a pipe, follow the pipe name with a
       colon ( : ) and then the parameter value (such as currency:'EUR'). If the pipe accepts multiple parameters, separate the values with colons (such as slice:1:5)
    4. we can chain pipes.
       e.g, {{ birthday | date | uppercase}} or {{  birthday | date:'fullDate' | uppercase}}
    5. we can create custome pipes. @Pipe({name: 'exponentialStrength'}), 
       pipe is a class and it takes object with two key:value pairs  1. name 2. pure
       To tell Angular that this is a pipe, you apply the @Pipe decorator, which you import from the core Angular library.
    6. pure and impure pipes.
       
       By default pipes are pure and set to true internally. @Pipe({name: 'exponentialStrength',pure: true})
       Angular executes a pure pipe only when it detects a pure change to the input value. 
       A pure change is either a change to a primitive input value (String, Number, Boolean, Symbol) or a changed object reference (Date, Array, Function, Object).
       *view gets updated for change in input value or change in object reference.
       
       Impure pipe:
       @Pipe({name: 'exponentialStrength', pure: false})
       Angular executes an impure pipe during every component change detection cycle. An impure pipe is called as often as every keystroke or mouse-move.
       *view gets updated for every DOM event.
  7.  async pipe updates the view once data comes from http request(observable) or promise
      e.g,  var x = new promise((resolve,reject) => 
        setTimeOut(resolve('done'),1000));
        in html {{x}} output is  [object,object] since promise is an object. view doesn't get updated after 1 sec'
        in html {{x | async}} output is done. view gets updated after 1 sec'
-->








Routing
<!--
   0. In traditional applications built with Server Side Routing when you change the URL in your browser, the browser makes a request to 
   the server to return some HTML which it will display.
   
   1. Client Side Routing.
   When we first navigate to a new site the server returns the html, javascript and css needed to render that page. All further changes to the
   URL are handled  locally by the client application. Typically the client application will make one or more API requests to get the information 
   it needs to show the new page.

   2. Angular has a couple of modules which let us implement our application as an SPA, the concept as a whole in Angular is 
      called the Component Router.

      import {Routes, RouterModule} from "@angular/router";

   3. Mapping of URLs to Components is done via something called a Route Configuration.
      const routes: Routes = [
            { path: '', component: HomeComponent, pathMatch: 'full' },
            { path: 'blog/:id', component: BlogComponent } //parameterised route
            { path: 'search', component: SearchComponent }
      ];
      Routes is a typescript type of Route[], an array of individual Route instances.
      For the special case of an empty URL we also need to add the pathMatch: 'full' property so Angular knows it should be matching exactly 
      the empty string and not partially the empty string.
   4. In Angular we can navigate to an URL in two ways.
      1. routerLink directive in HTML
      2. we can also programmatically navigate via a Router service we inject into our component, like so: this.router.navigate(['search']); //links params array
   5. Non-parameterised routes take precedence over parameterised routes.
   6. To read an Id in a component we use ActivatedRoute
      this.route.params.subscribe( params => console.log(params) );
      this.router.navigate(['search', {term: 'abc'}]); //optional params ({term:'abc'}); Url for optional params will be like /search;term=abc
   7. Child Routing
      https://angular-2-training-book.rangle.io/handout/routing/child_routes.html
   8. Router Guards.
      canActivate - checks whether to navigate to a particular page
      canActivateChild - checks whether to navigate to a particular child page
      canDectivate - confirms whether to save changes and navigate to a new page or discard changes.  
      
----------------------------------------------------------------------------------------------------------------
0. Router Module is required to make routed angular application.
1. Angular router service enables navigation from one view to other.
2. It is in its own library package, @angular/router
3. RouterModule   A separate NgModule that provides the necessary service providers and directives for navigating through application views.
4. A routed Angular application has one singleton instance of the Router service.When the browser's URL changes, that router looks for a 
   corresponding Route from which it can determine the component to display.
5. In  RouterModule.forRoot(appRoutes) the reference of configured routes are given.
6. The order of the routes in the configuration matters and this is by design. The router uses a first-match wins strategy when matching routes, 
   so more specific routes should be placed above less specific routes.
7. The RouterOutlet is a directive from the router library that is used like a component.Component templates(HTML) are rendered at routerOutlet.
8. Navigation happens in 3 ways
   1. During start of application the routes are configured to navigate to a particular component.
   2. As a result of some user action such as the click of an anchor tag.
      <a routerLink="/crisis-center" routerLinkActive="active">Crisis Center</a>.  routerLink is a directive and triggers navigation.
9. Router state
   
   a. After the end of each successful navigation lifecycle, the router builds a tree of ActivatedRoute objects that make up the 
   current state of the router. You can access the current RouterState from anywhere in the application using the Router service and 
   the routerState property. Each ActivatedRoute in the RouterState provides methods to traverse up and down the route tree to get information 
   from parent, child and sibling routes.
   b. The route path and parameters are available through an injected router service called the ActivatedRoute.
   c. ActivatedRoute contains route specific information such as route parameters, static data, resolve data, global query params, and the global fragment.
   

-->










Services
<!--
  1. Modern browsers support two different APIs for making HTTP requests: the XMLHttpRequest interface
     and the fetch() API.
  2. The HttpClient in @angular/common/http offers a simplified client HTTP API for Angular applications that rests on
     the XMLHttpRequest interface
  3. import HttpClientModule after BrowserModule in app.module.ts.
  4. http request returns an Observable so we subscribe to it in component.
  5. The subscribe callback above requires bracket notation to extract the data values.
      e.g, .subscribe((data: Config) => this.config = {   // data is an object
                          heroesUrl: data['heroesUrl'],
                          textfile:  data['textfile']
                          });
  6. You can't write data.heroesUrl because TypeScript correctly complains that the data object from the service
     does not have a heroesUrl property.
  7. RxJS is a library for composing asynchronous and callback-based code in a functional, reactive style.
  8. get(url) takes one parameter, put and post(url,data,httpOptions) takes 3 parameters, delete(url,httpOptions) takes 2 params.
  9. It is mandatory to subscribe to http request otherwise the server request will not take place.
  10. The AsyncPipe subscribes (and unsubscribes) for you automatically.
  11. httpClient is present in  @angular/common/http
  12. Sometimes the error is transient and will go away automatically if you try again. For example, network interruptions are common in
      mobile scenarios, and trying again may produce a successful result
      return this.http.get<Config>(this.configUrl)
     .pipe(
      retry(3), // retry a failed request up to 3 times
      catchError(this.handleError) // then handle the error
    )
  13. check Requesting non-JSON data and interceptors in angular.io.
  14. if we inject a service in parent component then all its children will have the access to that instance.
      Give reference of that service in @component decorator in provider:[] after styleurls:[].
      if we inject a service in  module then the instance will be available to whole module. Give reference of that
      service in provider:[] in app.module.ts
      if we want different instances for different components then in each  @component decorator in provider:[]
      after styleurls:[] give service ref.
  15. to inject a service say A into another service say B then B service should have @injectable decorator otherwise it throws an error
      when you access property or method of A service
  16. Learn about http receptors.

